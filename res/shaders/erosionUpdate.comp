#version 430 core

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(std430, binding = 0) buffer buffer_heightmap { float heightmap[]; };
layout(std430, binding = 1) buffer buffer_heightOut { float heightOut[]; };
layout(std430, binding = 2) buffer buffer_waterIn { float waterIn[]; };
layout(std430, binding = 3) buffer buffer_waterOut { float waterOut[]; };
layout(std430, binding = 4) buffer buffer_sedimentIn { float sedimentIn[]; };
layout(std430, binding = 5) buffer buffer_sedimentOut { float sedimentOut[]; };

layout(location=0) uniform int size;
layout(location=1) uniform float heightMax;
layout(location=2) uniform int currentStep;
layout(location=3) uniform float rain;
layout(location=4) uniform int rainFrequency;
layout(location=5) uniform float kE;

void main(){
    if (gl_GlobalInvocationID.y == 0 || gl_GlobalInvocationID.y == size - 1 ||
        gl_GlobalInvocationID.x == 0 || gl_GlobalInvocationID.x == size - 1)
        return;

    const uint cellIndex = gl_GlobalInvocationID.y * size + gl_GlobalInvocationID.x;

    // initialise buffers if first erosion step
    if (currentStep == 0){
        heightOut[cellIndex] = heightmap[cellIndex];
        waterIn[cellIndex] = rain * (heightmap[cellIndex] / heightMax);
        waterOut[cellIndex] = waterIn[cellIndex];
        sedimentIn[cellIndex] = 0.0;
        sedimentOut[cellIndex] = 0.0;
    }

    // else update buffers
    else {
        // apply evaporation if any
        waterOut[cellIndex] *= kE;
        if (waterOut[cellIndex] < 0.000001){
            heightOut[cellIndex] += sedimentOut[cellIndex];
            sedimentOut[cellIndex] = 0.0;
            waterOut[cellIndex] = 0.0;
        }
        
        heightmap[cellIndex] = heightOut[cellIndex];
        waterIn[cellIndex] = waterOut[cellIndex];
        sedimentIn[cellIndex] = sedimentOut[cellIndex];
    }

    // distribute rainfall
    if (rainFrequency > 0){
        if (currentStep % rainFrequency == 0){
            waterIn[cellIndex] += rain * (heightmap[cellIndex] / heightMax);
            waterOut[cellIndex] = waterIn[cellIndex];
        }
    }
}
